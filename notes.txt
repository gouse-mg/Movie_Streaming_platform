

Jwt token:

when u login the user after checking everything 
we make a token with the whole user object  
const token = jwt.sign(user,secret) // return the token
and assign that token to the cookie res.cookie("uid",token);
note: token is just like the string kind of thing 

jwt.verify(token_given_by_client,secret) // jwt will decode that token into the data and converts it to data 

secret key is needed to change the token without it if u try to change the data the tokne generated by that changed data wont be evaluvated when u do jwt.verify(changed_token,secret)

when u restart the server u still have that token which u send and that will be evaluvated true with 
jwt.verify(token_given_by_client,secret) and sends the data 




















***********************************************working in database***************************************************************************
const userSchema = new mongoose.Schema({
  name: String,
  age: Number
});  // ðŸ‘ˆ force mongoose to use existing "users" collection

const User = mongoose.model("users", userSchema);

const videoSchema = new mongoose.Schema({
  name: String,
  uploaded_by: {
    type: mongoose.Schema.Types.ObjectId,
    ref: "users"   // ðŸ‘ˆ tell mongoose this ObjectId references the "users" collection
  }
});

const Video = mongoose.model("videos", videoSchema);

const videos = await Video.find({uploaded_by: new mongoose.Types.ObjectId("68a05e60966c68b934eec4ab")}).populate("uploaded_by")
// db.videos.find({uploaded_by:"68a05e60966c68b934eec4ab"});
console.log(videos);